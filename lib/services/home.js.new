import { supabase } from '../supabase';

/**
 * Fetch service categories from Supabase
 * @param {number} limit - Maximum number of categories to fetch
 * @returns {Promise<{data: Array, error: any}>}
 */
export const fetchServiceCategories = async (limit = 8) => {
  try {
    const { data, error } = await supabase
      .from('service_categories')
      .select('*')
      .order('created_at', { ascending: true })
      .limit(limit);

    if (error) {
      console.error('Error fetching service categories:', error);
      return { data: null, error };
    }

    return { data: data || [], error: null };
  } catch (err) {
    console.error('Service categories fetch error:', err);
    return { data: null, error: err };
  }
};

/**
 * Fetch all service categories from Supabase without a limit
 * @returns {Promise<{data: Array, error: any}>}
 */
export const fetchAllCategories = async () => {
  try {
    const { data, error } = await supabase
      .from('service_categories')
      .select('*')
      .order('created_at', { ascending: true });

    if (error) {
      console.error('Error fetching all categories:', error);
      return { data: null, error };
    }

    return { data: data || [], error: null };
  } catch (err) {
    console.error('All categories fetch error:', err);
    return { data: null, error: err };
  }
};

/**
 * Fetch active services from Supabase with category information and workers
 * @param {number} limit - Maximum number of services to fetch
 * @returns {Promise<{data: Array, error: any}>}
 */
export const fetchActiveServices = async (limit = 10) => {
  try {
    // First, get services with their categories
    const { data: services, error } = await supabase
      .from('services')
      .select(`
        *,
        service_categories(
          id,
          name,
          description
        )
      `)
      .eq('is_active', true)
      .order('created_at', { ascending: false })
      .limit(limit);

    if (error) {
      console.error('Error fetching services:', error);
      return { data: null, error };
    }
    
    if (!services || services.length === 0) {
      return { data: [], error: null };
    }
    
    // For each service, fetch workers who provide this service with complete worker data
    const servicesWithWorkers = await Promise.all(
      services.map(async (service) => {
        const { data: workerServices, error: workerServiceError } = await supabase
          .from('worker_services')
          .select(`
            *,
            workers(
              id,
              first_name,
              last_name,
              bio,
              hourly_rate,
              average_rating,
              total_jobs
            )
          `)
          .eq('service_id', service.id);

        if (workerServiceError) {
          console.error(`Error fetching workers for service ${service.id}:`, workerServiceError);
          return { ...service, workers: [] };
        }

        // Debug log to see raw worker data
        console.log(`Raw worker_services data for ${service.name}:`, JSON.stringify(workerServices, null, 2));

        // Extract worker information from the results
        const workers = workerServices.map(ws => {
          console.log(`Individual worker_service entry for ${service.name}:`, ws);
          if (!ws.workers) {
            console.warn(`No workers data found for entry in service ${service.name}`);
            return null;
          }
          return {
            ...ws.workers,
            custom_price: ws.custom_price
          };
        }).filter(w => w !== null);

        console.log(`Processed ${workers.length} workers for service ${service.name}`);
        
        return {
          ...service,
          workers: workers || []
        };
      })
    );

    return { data: servicesWithWorkers || [], error: null };
  } catch (err) {
    console.error('Services fetch error:', err);
    return { data: null, error: err };
  }
};
