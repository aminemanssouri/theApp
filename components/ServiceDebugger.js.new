import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';
import { COLORS, SIZES } from '../constants';

/**
 * Debug component to show service data in the app
 * Add this to your Home.js screen to debug service data
 */
const ServiceDebugger = ({ services = [] }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  
  // Count services with workers and valid provider names
  const servicesWithWorkers = services.filter(s => s.hasWorker).length;
  const servicesWithProviderNames = services.filter(s => s.providerName && s.providerName !== "Professional" && s.providerName !== "Service Provider").length;

  if (!isExpanded) {
    return (
      <TouchableOpacity 
        style={styles.minimizedContainer}
        onPress={() => setIsExpanded(true)}
      >
        <Text style={styles.debuggerTitle}>
          Service Debugger ({services.length} services, {servicesWithWorkers} with workers) - Tap to expand
        </Text>
      </TouchableOpacity>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.debuggerTitle}>Service Debugger</Text>
        <TouchableOpacity 
          style={styles.closeButton}
          onPress={() => setIsExpanded(false)}
        >
          <Text style={styles.buttonText}>Collapse</Text>
        </TouchableOpacity>
      </View>
      
      <View style={styles.statsContainer}>
        <Text style={styles.statsText}>
          Total Services: {services.length} | 
          With Workers: {servicesWithWorkers} |
          Named Providers: {servicesWithProviderNames}
        </Text>
      </View>
      
      <ScrollView style={styles.scrollView}>
        <Text style={styles.sectionTitle}>Service Worker Info</Text>
        
        {services.map((service, index) => (
          <View key={service.id || index} style={styles.serviceItem}>
            <Text style={styles.serviceTitle}>
              {index + 1}. {service.name || 'Unnamed Service'}
            </Text>
            
            <View style={styles.infoRow}>
              <Text style={styles.infoLabel}>Provider:</Text>
              <Text style={styles.infoValue}>{service.providerName || 'Not set'}</Text>
            </View>
            
            <View style={styles.infoRow}>
              <Text style={styles.infoLabel}>Has Worker:</Text>
              <Text style={styles.infoValue}>{service.hasWorker ? 'Yes' : 'No'}</Text>
            </View>
            
            {service.hasWorker && service.worker && (
              <View style={styles.workerContainer}>
                <Text style={styles.workerTitle}>Worker Data:</Text>
                
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>First Name:</Text>
                  <Text style={styles.infoValue}>{service.worker.first_name || 'Not set'}</Text>
                </View>
                
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Last Name:</Text>
                  <Text style={styles.infoValue}>{service.worker.last_name || 'Not set'}</Text>
                </View>
                
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Display Name:</Text>
                  <Text style={styles.infoValue}>{service.worker.display_name || 'Not set'}</Text>
                </View>
                
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Jobs:</Text>
                  <Text style={styles.infoValue}>
                    {service.worker.total_jobs || service.worker.completed_jobs || 0}
                  </Text>
                </View>
                
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Rating:</Text>
                  <Text style={styles.infoValue}>
                    {service.worker.average_rating || service.rating || 0}
                  </Text>
                </View>
              </View>
            )}
          </View>
        ))}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  minimizedContainer: {
    margin: 16,
    padding: 12,
    backgroundColor: 'rgba(33, 150, 243, 0.1)',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'rgba(33, 150, 243, 0.3)',
  },
  container: {
    margin: 16,
    padding: 16,
    backgroundColor: '#fff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#ddd',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 1.41,
    elevation: 2,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  debuggerTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    backgroundColor: '#f44336',
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 4,
  },
  buttonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  statsContainer: {
    marginBottom: 10,
    padding: 8,
    backgroundColor: '#f5f5f5',
    borderRadius: 4,
  },
  statsText: {
    fontSize: 12,
    color: '#666',
  },
  scrollView: {
    maxHeight: 400,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    marginTop: 10,
    marginBottom: 5,
    color: '#2196f3',
  },
  serviceItem: {
    marginVertical: 8,
    padding: 10,
    backgroundColor: '#f9f9f9',
    borderRadius: 4,
    borderLeftWidth: 3,
    borderLeftColor: '#2196f3',
  },
  serviceTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#333',
  },
  infoRow: {
    flexDirection: 'row',
    marginVertical: 2,
  },
  infoLabel: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#666',
    width: 100,
  },
  infoValue: {
    fontSize: 12,
    color: '#333',
    flex: 1,
  },
  workerContainer: {
    marginTop: 8,
    padding: 8,
    backgroundColor: 'rgba(139, 195, 74, 0.1)',
    borderRadius: 4,
  },
  workerTitle: {
    fontSize: 13,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#558b2f',
  },
});

export default ServiceDebugger;
